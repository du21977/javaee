
cookie:
服务器：
    1.构建cookie
    2.存数据到cookie
    3.返回cookie
客户端：
    访问服务器时，会携带上次服务器返回过来的cookie信息

cookie的问题：
    cookie存放在客户端，会存在安全问题
    cookie的大小有限制，一般不会超过20个,不超过4kb
    cookie不能存中文，只能存字符串，不能存对象


session:
    session是基于cookie的一种会话机制，是服务器的一块内存空间，用来存储数据
    cookie是存在客户端，session是存在服务器端


如果cookie里面有sessionID,那么这个getSession方法就会跟着这个id去找到session的内存空间，然后返回那个内存空间
如果没有sessionID，会自动创建session

 HttpSession session = request.getSession();
//1.获取session session其实就是内存中的一块区域
        //只要有这句话，就是说只要产生了session空间，服务器就会自动把sessionid加到cookie中去
        //session自动失效时间默认为30分钟

sesson何时创建：第一次request.getSession()的时候
session何时销毁：默认超时30分钟就销毁，
                手动调用invilidate，让空间失效也销毁(退出登录)

session的失效时间是session不活动开始计算的，如果一直活动，就不会过期，该session不访问就开始计时，访问计时清零


Token操作-----
https://www.imooc.com/article/49750
客户端登录，输入用户名和密码，后台进行验证，如果验证失败则返回登录失败的提示。
如果验证成功，则生成token然后将username和token双向绑定
(可以根据username取出token也可以根据token取出username)存入redis,
同时使用token+username作为key把当前时间戳也存入redis。并且给它们都设置过期时间。
token可以根据用户使用的情况来动态的调整自己过期时间。

我们在生成token的同时也往redis里面存入了创建token时的时间戳，
每次请求被拦截器拦截token 验证成功之后，将当前时间与存在redis里面的token生成时刻的时间戳进行比较，
当当前时间的距离创建时间快要到达设置的redis过期时间的话，就重新设置token过期时间，将过期时间延长。
如果用户在设置的redis过期时间的时间长度内没有进行任何操作（没有发请求），则token会在redis中过期




