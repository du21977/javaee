
为什么要有事务
保持数据的一致性
代码执行出现异常，数据回滚

事务的特性
原子性：多线程中的同步，事务要么全部成功，要么全部失败
一致性：银行转账，A减钱，B加钱
隔离性：多线程同时操作事务，互不受影响
持久性：保存到数据库后永久保存

事务在service层，service层调多个dao层，可对事务进行统一管理

声明式事务----xml方式和注解方式
1.什么时候提交事务？
在方法结束后提交事务
2.什么时候回滚
抛异常的时候会回滚
如果代码中有try。。。catch时，必须手动设置回滚---不然默认不走回滚
TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();

Spring事务传播行为
事务嵌套，事务里面有事务，该怎么执行
例如下面例子
class LogService {
    @Transactional（ROPAGATION_REQUIRED_NEW）
    public void addLog();---调用数据库插入日志
}
 class UserService {
   private LogService  logService ;
   @Transactional(ROPAGATION_REQUIRED_NEW)
   public void addServiceUser(){
   logService.addLog();---
   addUser()--往数据插入用户信息
   int i =1/0;
  }
 }

 ROPAGATION_REQUIRED  如果当前有事物,就用当前的事物,不会新增事物，而是加入到这个事务中。---默认
 ROPAGATION_REQUIRED_NEW 如果当前有事物,不会加入当前事物,会新增事物,相当于各用各的事务

 SUPPORTS:支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）
 MANDATORY：使用当前的事务，如果当前没有事务，就抛出异常
 NOT_SUPPORTED:以非事务方式执行操作，如果当前存在事务，就把当前事务挂起
 NEVER:以非事务方式运行，如果当前存在事务，抛出异常
 NESTED:如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行 REQUIRED 类似的操作


 事务包括：
 编程事务：手动调用事务begin commit ----------相当于开车的手动挡
 声明式事务：原理使用编程事务+反射来完成-------相当于开车自动挡