<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dobi.dao.IUserDao">
    <!--配置查询所有,resultType返回结果类型，parameterType参数类型-->
    <select id="findAll" resultType="com.dobi.domain.User">
        select * from user
    </select>

    <!-- 根据 id 查询，resultType返回结果类型，parameterType参数类型 ，#{}字符，它代表占位符-->
    <select id="findById" resultType="com.dobi.domain.User" parameterType="int">
        select * from user where id = #{uid}
    </select>

    <!-- 保存用户,,语法格式就是使用 #{对象.对象}的方式-->
    <!--#{user.username}它会先去找 user 对象，然后在 user 对象中找到 username 属性，并调用-->
    <!--getUsername()方法把值取出来。但是我们在 parameterType 属性上指定了实体类名称，所以可以省略 user.-->
    <!--而直接写 username。-->
    <insert id="saveUser" parameterType="com.dobi.domain.User">
        <!-- 配置保存时获取插入的 id -->
        <selectKey keyColumn="id" keyProperty="id" resultType="int">
            select last_insert_id();
        </selectKey>
        insert into user(username,birthday,sex,address)
        values(#{username},#{birthday},#{sex},#{address})
    </insert>

    <!-- 更新用户 -->
    <update id="updateUser" parameterType="com.dobi.domain.User">
        update user set username=#{username},birthday=#{birthday},sex=#{sex},
        address=#{address} where id=#{id}
    </update>

    <!-- 删除用户 -->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id = #{uid}
    </delete>

    <!-- 根据名称模糊查询 -->
    <select id="findByName" resultType="com.dobi.domain.User" parameterType="String">
        select * from user where username like #{username}
    </select>

    <!--#{}表示一个占位符号-->
    <!--通过#{}可以实现 preparedStatement 向占位符中设置值，自动进行 java 类型和 jdbc 类型转换，-->
    <!--#{}可以有效防止 sql 注入。 #{}可以接收简单类型值或 pojo 属性值。 如果 parameterType 传输单个简单类-->
    <!--型值，#{}括号中可以是 value 或其它名称。-->
    <!--${}表示拼接 sql 串-->
    <!--通过${}可以将 parameterType 传入的内容拼接在 sql 中且不进行 jdbc 类型转换， ${}可以接收简-->
    <!--单类型值或 pojo 属性值，如果 parameterType 传输单个简单类型值，${}括号中只能是 value-->
    <!-- 根据名称模糊查询另外一种写法 -->
    <!--<select id="findByName" parameterType="string" resultType="com.itheima.domain.User">-->
        <!--select * from user where username like '%${value}%'-->
    <!--</select>-->


    <!-- 查询总记录条数 -->
    <select id="findTotal" resultType="int">
    select count(*) from user;
    </select>

    <!-- 根据用户名称模糊查询，参数变成一个 QueryVo 对象了 -->
    <select id="findByVo" resultType="com.dobi.domain.User"
            parameterType="com.dobi.domain.QueryVo">
        select * from user where username like #{user.username};
    </select>



</mapper>